<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//KO"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.khedu.fitroutine.post.mapper.PostMapper">
    <select id="selectPostsByBlogId" resultType="kr.co.khedu.fitroutine.post.model.dto.PostResponse">
        SELECT
            P.POST_ID,
            P.TITLE,
            P.CONTENT,
            P.CATEGORY,
            P.CREATED_AT,
            P.BLOG_ID,
            M.NICKNAME
        FROM TB_POST P
            JOIN TB_BLOG B ON B.BLOG_ID = P.BLOG_ID
            JOIN TB_MEMBER M ON M.MEMBER_ID = B.MEMBER_ID
        <where>
            <if test="blogId != null">
                P.BLOG_ID = #{blogId}
            </if>
        </where>
        <choose>
            <when test="sort.name() == 'likes'">
                ORDER BY (
                    SELECT COUNT(1)
                    FROM TB_POST_LIKE L
                    WHERE L.POST_ID = P.POST_ID
                ) ${order.name()}
            </when>
            <otherwise>
                ORDER BY P.CREATED_AT ${order.name()}
            </otherwise>
        </choose>
        OFFSET #{offset} ROWS FETCH NEXT #{size} ROWS ONLY
    </select>
    <select id="selectPostById" resultType="kr.co.khedu.fitroutine.post.model.dto.PostResponse">
        SELECT
            P.POST_ID,
            P.TITLE,
            P.CONTENT,
            P.CATEGORY,
            P.CREATED_AT,
            P.BLOG_ID,
            M.NICKNAME
        FROM TB_POST P
            JOIN TB_BLOG B ON B.BLOG_ID = P.BLOG_ID
            JOIN TB_MEMBER M ON M.MEMBER_ID = B.MEMBER_ID
        WHERE P.POST_ID = #{postId}
    </select>
    <select id="existsPostByMemberId" resultType="int">
        SELECT
            CASE
                WHEN EXISTS (
                    SELECT 1
                    FROM TB_MEMBER M
                    JOIN TB_BLOG B ON M.MEMBER_ID = B.MEMBER_ID
                    JOIN TB_POST P ON B.BLOG_ID = P.BLOG_ID
                    WHERE M.MEMBER_ID = #{memberId}
                    AND P.POST_ID = #{postId}
                )
                THEN 1
                ELSE 0
            END
        FROM DUAL
    </select>
    <insert id="insertPost">
        <selectKey keyProperty="createRequest.postId" resultType="long" order="BEFORE">
            SELECT SEQ_POST_ID.NEXTVAL
            FROM dual
        </selectKey>
        INSERT INTO TB_POST (
            POST_ID,
            TITLE,
            CONTENT,
            CATEGORY,
            BLOG_ID
        )
        VALUES (
            #{createRequest.postId},
            #{createRequest.title},
            #{createRequest.content},
            #{createRequest.category},
            #{blogId}
        )
    </insert>
    <update id="updatePost">
        UPDATE TB_POST
        <set>
            <if test="updateRequest.title != null">
                TITLE = #{updateRequest.title},
            </if>
            <if test="updateRequest.content != null">
                CONTENT = #{updateRequest.content},
            </if>
            <if test="updateRequest.category != null">
                CATEGORY = #{updateRequest.category},
            </if>
        </set>
        WHERE POST_ID = #{postId}
    </update>
    <delete id="deletePost">
        DELETE FROM TB_POST
        WHERE POST_ID = #{postId}
    </delete>
    <select id="selectPostLikes" resultType="kr.co.khedu.fitroutine.post.model.dto.PostLikesResponse">
        SELECT
            NVL(
                MAX(
                    CASE
                        WHEN MEMBER_ID = #{memberId} THEN 1
                        ELSE 0
                    END
                ),
                0
            ) AS liked,
            COUNT(*) AS count
        FROM TB_POST_LIKE
        WHERE POST_ID = #{postId}
    </select>
    <insert id="likePost">
        INSERT INTO TB_POST_LIKE
        VALUES (
            #{memberId},
            #{postId}
        )
    </insert>
    <delete id="unlikePost">
        DELETE FROM TB_POST_LIKE
        WHERE MEMBER_ID = #{memberId}
        AND POST_ID = #{postId}
    </delete>
</mapper>